// Generated by BUCKLESCRIPT VERSION 1.7.4, PLEASE EDIT WITH CARE
'use strict';

var $$Array      = require("bs-platform/lib/js/array.js");
var Curry        = require("bs-platform/lib/js/curry.js");
var Option       = require("./option.js");
var Random       = require("bs-platform/lib/js/random.js");
var Caml_array   = require("bs-platform/lib/js/caml_array.js");
var DocumentRe   = require("bs-webapi/lib/js/src/dom/nodes/documentRe.js");
var Pervasives   = require("bs-platform/lib/js/pervasives.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var state = /* record */[
  /* particles : array */[],
  /* window : record */[
    /* width */0,
    /* height */0
  ],
  /* mouse : record */[
    /* x */0,
    /* y */0
  ]
];

var width = window.innerWidth;

var height = window.innerHeight;

state[/* window */1][/* width */0] = width;

state[/* window */1][/* height */1] = height;

state[/* mouse */2][/* x */0] = width / 2 | 0;

state[/* mouse */2][/* y */1] = height / 2 | 0;

var canvas = document.createElement("canvas");

var ctx = canvas.getContext("2d");

Option.map(function (param) {
      param.appendChild(canvas);
      return /* () */0;
    }, Option.andThen(function (prim) {
          return Js_primitive.null_to_opt(prim.body);
        }, DocumentRe.asHtmlDocument(document)));

canvas.setAttribute("height", Pervasives.string_of_int(height));

canvas.setAttribute("width", Pervasives.string_of_int(width));

function onMouseMove(e) {
  state[/* mouse */2][/* x */0] = e.clientX;
  state[/* mouse */2][/* y */1] = e.clientY;
  return /* () */0;
}

canvas.addEventListener("mousemove", onMouseMove);

function genItems(num, callback) {
  var emptyArray = Caml_array.caml_make_vect(num, 0);
  return $$Array.map(Curry.__1(callback), emptyArray);
}

state[/* particles */0] = genItems(2000, function () {
      var x = Random.$$float(1) * width;
      var y = Random.$$float(1) * height;
      return /* record */[
              /* pos : float array */[
                x,
                y
              ],
              /* oldPos : float array */[
                x,
                y
              ]
            ];
    });

function integrateParticle(p) {
  var velocityX = (p[/* pos */0][/* x */0] - p[/* oldPos */1][/* x */0]) * 0.999;
  var velocityY = (p[/* pos */0][/* y */1] - p[/* oldPos */1][/* y */1]) * 0.999;
  p[/* oldPos */1][/* x */0] = p[/* pos */0][/* x */0];
  p[/* oldPos */1][/* y */1] = p[/* pos */0][/* y */1];
  p[/* pos */0][/* x */0] = p[/* pos */0][/* x */0] + velocityX;
  p[/* pos */0][/* y */1] = p[/* pos */0][/* y */1] + velocityY;
  return /* () */0;
}

function attractParticle(mouse, p) {
  var dx = mouse[/* x */0] - p[/* pos */0][/* x */0];
  var dy = mouse[/* y */1] - p[/* pos */0][/* y */1];
  var distance = Math.sqrt(dx * dx + dy * dy);
  p[/* pos */0][/* x */0] = p[/* pos */0][/* x */0] + dx / distance;
  p[/* pos */0][/* y */1] = p[/* pos */0][/* y */1] + dy / distance;
  return /* () */0;
}

function updateParticle(mouse, p) {
  attractParticle(mouse, p);
  integrateParticle(p);
  return /* () */0;
}

function update(state) {
  var partial_arg = state[/* mouse */2];
  return $$Array.iter(function (param) {
              return updateParticle(partial_arg, param);
            }, state[/* particles */0]);
}

function drawBackground(color, width, height) {
  ctx.fillStyle = color;
  ctx.fillRect(0, 0, width, height);
  return /* () */0;
}

function drawParticle(p) {
  ctx.strokeStyle = "#ffffff";
  ctx.lineWidth = 2;
  ctx.beginPath();
  ctx.moveTo(p[/* oldPos */1][/* x */0] | 0, p[/* oldPos */1][/* y */1] | 0);
  ctx.lineTo(p[/* pos */0][/* x */0] | 0, p[/* pos */0][/* y */1] | 0);
  ctx.stroke();
  return /* () */0;
}

function draw(state) {
  drawBackground("#000000", width, height);
  return $$Array.iter(drawParticle, state[/* particles */0]);
}

function loop() {
  update(state);
  draw(state);
  requestAnimationFrame(loop);
  return /* () */0;
}

loop(/* () */0);

var damping = 0.999;

var numParticles = 2000;

exports.damping           = damping;
exports.numParticles      = numParticles;
exports.state             = state;
exports.width             = width;
exports.height            = height;
exports.canvas            = canvas;
exports.ctx               = ctx;
exports.onMouseMove       = onMouseMove;
exports.genItems          = genItems;
exports.integrateParticle = integrateParticle;
exports.attractParticle   = attractParticle;
exports.updateParticle    = updateParticle;
exports.update            = update;
exports.drawBackground    = drawBackground;
exports.drawParticle      = drawParticle;
exports.draw              = draw;
exports.loop              = loop;
/* width Not a pure module */
